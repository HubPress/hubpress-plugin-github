"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function getRepositoryInfos(e){var t=_q2.default.defer();return e.getDetails(function(e,n){e?t.reject(e):t.resolve(n)}),t.promise}function getAuthorizations(e){var t=_q2.default.defer();console.log("getAuthorizations",e);var n={};return e.listAuthorizations(n,function(e,n){e?t.reject(e):(console.log("getAuthorizations list",n),t.resolve(n))}),t.promise}function getUserInformations(e){return function(){var t=_q2.default.defer();return e.getProfile(function(e,n){e?t.reject(e):t.resolve(_lodash2.default.pick(n,["login","id","name","location","blog","avatar_url","bio"]))}),t.promise}}function getTokenNote(e){return(0,_hubpressCoreSlugify2.default)(e+"-"+_platform2.default.name+"-"+_platform2.default.os)}function _searchAndDeleteAuthorization(e,t,n){var o=_q2.default.defer(),r=-1,i=getTokenNote(e);return t.forEach(function(e){var t=e.note;t===i&&(r=e.id)}),r!==-1?n.deleteAuthorization(r,function(e,t){e?o.reject(e):o.resolve()}):o.resolve(),o.promise}function _createAuthorization(e,t){var n=_q2.default.defer(),o={scopes:["public_repo"],note:getTokenNote(e)};return t.createAuthorization(o,function(e,t){e?n.reject(e):n.resolve(t)}),n.promise}function login(e){console.log("githubPlugin - login",e);var t=_q2.default.defer(),n=e.nextState.credentials,o=e.rootState.application.config.meta;githubInstance=new _githubApi2.default({auth:"basic",username:n.email,password:n.password,twoFactorCode:n.twoFactorCode});var r=githubInstance.getRepo(o.username,o.repositoryName),i=githubInstance.getAuthorization(),a=githubInstance.getUser(),s=void 0,u=void 0;return getRepositoryInfos(r).then(function(e){s=e}).then(getUserInformations(a)).then(function(e){return u=e,getAuthorizations(i)}).then(function(e){return _searchAndDeleteAuthorization(o.repositoryName,e,i)}).then(function(){return _createAuthorization(o.repositoryName,i)}).then(function(e){githubInstance=new _githubApi2.default({auth:"oauth",token:e.token}),t.resolve({isAuthenticated:!0,credentials:{token:e.token},permissions:s.permissions,userInformations:u})}).catch(function(e){console.error("githubPlugin - login error",e,e.response);var n,r={type:"error",title:"Authentication"};if(e.response){var a=e.response.headers&&e.response.headers["x-github-otp"]||"";n="required"===a.split(";")[0]}n?(_createAuthorization(o.repositoryName,i),console.log("githubPlugin - OTP required : ",n),r.type="warning",r.content="A two-factor authentication code is needed.",r.otp=!0,t.resolve({isAuthenticated:!1,isTwoFactorCodeRequired:!0})):(console.error("githubPlugin - login error",e),t.reject({error:{code:e.error,message:"Unable to authenticate, check your credentials."}}))}),t.promise}function getGithubPostsSha(e,t){var n=_q2.default.defer();return e.getContents(t.meta.branch,"",!0,function(e,t){if(e)n.reject(e);else{var o=void 0;t.forEach(function(e){"_posts"===e.name&&(o=e.sha)}),n.resolve(o)}}),n.promise}function getPostsGithub(e,t,n){var o=void 0;if(n===localStorage.postsSha)o=_q2.default.fcall(function(){return[]});else{var r=_q2.default.defer();e.getContents(t.meta.branch,"_posts",!0,function(e,t){e?r.reject(e):r.resolve(t)}),o=r.promise}return o}function markIfPostPublished(e,t){var n=_q2.default.defer(),o=e.meta,r=githubInstance.getRepo(o.username,o.repositoryName);return r.getSha(e.meta.branch,e.urls.getPostGhPath(t.name),function(e,o){if(e&&e.response&&404!==e.response.status)n.reject(e);else{var r=o?1:0,i=Object.assign({},t,{published:r});n.resolve(i)}}),n.promise}function markIfPostsPublished(e,t,n){var o=_lodash2.default.compact(n),r=o.map(function(e){return markIfPostPublished(t,e)});return _q2.default.all(r)}function getPostAuthor(e,t,n){var o=_q2.default.defer(),r=e.meta,i=githubInstance.getRepo(r.username,r.repositoryName);return console.log("getPostAuthor",t),i.listCommits({sha:e.meta.branch,path:t.original&&t.original.path||t.path},function(e,r){if(e&&404!==e.error)o.reject(e);else{var i=r[r.length-1].author;if(i&&i.login!==n.login){var a=githubInstance.getUser();getUserInformations(a)(i.login).then(function(e){i=Object.assign({},e);var n=Object.assign({},t,{author:i});o.resolve(n)}).catch(function(e){return o.reject(e)})}else{i=Object.assign({},n);var s=Object.assign({},t,{author:i});o.resolve(s)}}}),o.promise}function getPostsAuthor(e,t,n,o){var r=n.map(function(e){return getPostAuthor(t,e,o)});return _q2.default.all(r)}function readContent(e,t,n){var o=[];return n.forEach(function(n){var r=_q2.default.defer();o.push(r.promise),e.getContents(t.meta.branch,n.path,!0,function(e,t){if(e)r.reject(e);else{var o=void 0;o=Object.assign({},n,{content:t}),r.resolve(o)}})}),_q2.default.all(o)}function getPosts(e){var t=e.application.config;console.log("Get posts",t);var n=t.meta,o=githubInstance.getRepo(n.username,n.repositoryName);return getGithubPostsSha(o,t).then(function(e){return getPostsGithub(o,t,e)}).then(function(e){return e.map(function(e){return _lodash2.default.pick(e,["name","path","sha","size"])})}).then(function(e){return markIfPostsPublished(o,t,e)}).then(function(n){return getPostsAuthor(o,t,n,e.authentication.userInformations)}).then(function(e){return readContent(o,t,e)})}function deleteElement(e,t,n){var o=_q2.default.defer();return e.deleteFile(t,n,function(e,t){e?o.reject(e):o.resolve(t)}),o.promise}function deletePost(e,t,n){return deleteElement(e,t,n)}function movePostIfNecessary(e,t){var n=e.meta,o=githubInstance.getRepo(n.username,n.repositoryName),r=void 0;if(t.original&&t.name!==t.original.name){var i=_q2.default.defer();r=i.promise;var a=e.meta.branch,s="_posts/"+t.original.name,u="_posts/"+t.name;o.move(a,s,u,function(n,r){if(n)i.reject(n);else if(t.published){var s=e.urls.getPostGhPath(t.original.name);deletePost(o,a,s).then(function(e){i.resolve({post:t,sha:e})}).catch(function(e){i.reject(e)}).done()}else i.resolve({post:t,sha:r})})}else r=(0,_q2.default)({post:t});return r}function writePost(e,t){console.log("Write post",e,t);var n=e.meta,o=githubInstance.getRepo(n.username,n.repositoryName),r=n.branch,i="_posts/"+t.name,a="Update "+t.name,s=_q2.default.defer();return o.writeFile(r,i,t.content,a,function(n,o){n?s.reject(n):(t.original=_lodash2.default.omit(t,["original"]),t.original.url=e.urls.getPostUrl(t.original.name),t.original.path="_posts/"+t.original.name,t.original.sha=o,s.resolve(t))}),s.promise}function writeConfig(e){console.log("Write config",e);var t=_q2.default.defer(),n=e.meta,o=githubInstance.getRepo(n.username,n.repositoryName),r=n.branch;return o.writeFile(r,"hubpress/config.json",JSON.stringify(e,null,2),"Update configuration file",function(e,n){e?t.reject(e):t.resolve(n)}),t.promise}function manageCname(e){console.log("Github manageCname - ",e);var t=e.meta,n=githubInstance.getRepo(t.username,t.repositoryName),o=_q2.default.defer(),r=function(e,t){e&&"not found"!==e?o.reject(e):o.resolve(t)};return t.cname&&""!==t.cname?(console.info("SettingsService - saveAndPublish save CNAME"),n.writeFile(t.branch,"CNAME",t.cname,"Update CNAME with "+t.cname).then(o.resolve).catch(o.reject)):(console.info("SettingsService - saveAndPublish delete CNAME"),n.deleteFile(t.branch,"CNAME",r).then(function(e){console.log("SHA after delete",e),o.resolve(e)}).catch(function(e){404!==e.response.status?o.reject(e):o.resolve()})),o.promise}function githubPlugin(e){e.on("application:request-config",function(e){return console.info("githubPlugin - application:request-config"),console.log("githubPlugin - application:request-config",e),(0,_isomorphicFetch2.default)("config.json?dt="+Date.now()).then(function(e){return e.json()}).then(function(t){return e.nextState.config=Object.assign({},e.nextState.config,t),e.nextState.config.theme.name=e.nextState.config.theme.name.toLowerCase(),e})}),e.on("application:receive-config",function(e){console.info("githubPlugin - application:receive-config"),console.log("githubPlugin - application:receive-config",e);var t=(0,_urls2.default)(e.nextState.config);return e.nextState.config=Object.assign({},e.nextState.config,{urls:t}),e}),e.on("requestAuthentication",function(e){return console.info("githubPlugin - requestAuthentication"),console.log("githubPlugin - requestAuthentication",e),login(e).then(function(t){var n=Object.assign({},e.nextState.credentials,t.credentials);return e.nextState=Object.assign({},e.nextState,t,{credentials:n}),e})}),e.on("receiveSavedAuth",function(e){return console.info("githubPlugin - receiveSavedAuth"),console.log("githubPlugin - receiveSavedAuth",e),e.nextState.authentication.isAuthenticated&&(githubInstance=new _githubApi2.default({auth:"oauth",token:e.nextState.authentication.credentials.token})),e}),e.on("hubpress:request-remote-synchronization",function(e){return console.info("githubPlugin - hubpress:request-remote-synchronization"),console.log("githubPlugin - hubpress:request-remote-synchronization",e),e.rootState.authentication.isAuthenticated?getPosts(e.rootState).then(function(t){return e.nextState=Object.assign({},e.nextState,{posts:t}),e}):e}),e.on("requestSaveRemotePost",function(e){console.info("githubPlugin - requestSaveRemotePost"),console.log("githubPlugin - requestSaveRemotePost",e);var t=e.rootState.application.config,n=e.nextState.post;return movePostIfNecessary(t,n).then(function(e){return writePost(t,e.post)}).then(function(n){return getPostAuthor(t,n,e.rootState.authentication.userInformations)}).then(function(t){return e.nextState.post=t,e})}),e.on("requestSaveRemotePublishedElements",function(e){console.info("githubPlugin - requestSaveRemotePublishedElements"),console.log("githubPlugin - requestSaveRemotePublishedElements",e);var t=e.rootState.application.config.meta,n=githubInstance.getRepo(t.username,t.repositoryName),o=e.nextState.elementsToPublish.length,r=_lodash2.default.chunk(e.nextState.elementsToPublish,TREE_CHUNK_SIZE);console.log("Writeall",e.nextState.elementsToPublish);var i=_q2.default.defer();return n.getBranch(t.branch,function(a,s){if(a){var u=_q2.default.defer();return i=u.promise,u.reject(a)}var c=0,l=r.reduce(function(e,r){var i=function(e){var i=_q2.default.defer(),a=r.map(function(e){return{path:e.path,mode:"100644",type:"blob",content:e.content}});return n.createTree(a,e,function(a,s){return a?i.reject(a):void n.commit(e,s.sha,"Published "+(c+r.length)+"/"+o+" elements",function(e,o){return e?i.reject(e):(c+=r.length,void n.updateHead("heads/"+t.branch,o.sha,!1,function(e,t){return console.log("updateHead",e,t),e?i.reject(e):void i.resolve(o.sha)}))})}),i.promise};return e.then(i)},(0,_q2.default)(s.commit.sha));l.then(function(t){i.resolve(e)}).catch(function(e){i.reject(e)})}),i.promise}),e.on("requestDeleteRemotePost",function(e){console.info("githubPlugin - requestDeleteRemotePost"),console.log("githubPlugin - requestDeleteRemotePost",e);var t=_q2.default.defer(),n=e.rootState.application.config,o=n.meta,r=githubInstance.getRepo(o.username,o.repositoryName),i=e.nextState.post.original.path;return r.deleteFile(o.branch,i,function(n,o){n&&n.response&&404!==n.response.status?t.reject(n):t.resolve(e)}).catch(function(n){n&&n.response&&404===n.response.status&&t.resolve(e)}),t.promise}),e.on("requestDeleteRemotePublishedPost",function(e){console.info("githubPlugin - requestDeleteRemotePublishedPost"),console.log("githubPlugin - requestDeleteRemotePublishedPost",e);var t=_q2.default.defer(),n=e.rootState.application.config,o=n.meta,r=githubInstance.getRepo(o.username,o.repositoryName),i=n.urls.getPostGhPath(e.nextState.post.original.name);return r.deleteFile(o.branch,i,function(n,o){n?t.reject(n):t.resolve(e)}),t.promise}),e.on("application:request-save-config",function(e){console.info("githubPlugin - application:request-save-config"),console.log("githubPlugin - application:request-save-config",e);var t=e.nextState.application;return writeConfig(t.config).then(function(e){return manageCname(t.config)}).then(function(t){return e})}),e.on("receiveRenderingPost",function(e){return console.info("githubPlugin - receiveRenderingPost"),console.log("githubPlugin - receiveRenderingPost",e),e})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.githubPlugin=githubPlugin;var _platform=require("platform"),_platform2=_interopRequireDefault(_platform),_isomorphicFetch=require("isomorphic-fetch"),_isomorphicFetch2=_interopRequireDefault(_isomorphicFetch),_hubpressCoreSlugify=require("hubpress-core-slugify"),_hubpressCoreSlugify2=_interopRequireDefault(_hubpressCoreSlugify),_githubApi=require("github-api"),_githubApi2=_interopRequireDefault(_githubApi),_q=require("q"),_q2=_interopRequireDefault(_q),_lodash=require("lodash"),_lodash2=_interopRequireDefault(_lodash),_urls=require("./urls"),_urls2=_interopRequireDefault(_urls),TREE_CHUNK_SIZE=50,githubInstance=void 0;